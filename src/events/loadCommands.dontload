/*import { defineEvent } from '../../discordkit/utils/event';
import { Harmonix, HarmonixCommand } from '../../discordkit/types/harmonixtypes';
import { scanFiles } from '../core';
import { Effect } from 'effect';
import { colors } from 'consola/utils';
import consola from 'consola';
import path from 'path';

export default class extends defineEvent({
  name: 'CommandLoad' as any,
  description: 'Loads all commands when the bot starts',
  once: true,
}) {
  static async execute(harmonix: Harmonix): Promise<void> {
    const files = await scanFiles(harmonix, 'commands');
    console.log(`Total command files found: ${files.length}`);

    let loadedRegularCommands = 0;
    let loadedSlashCommands = 0;
    let skippedCommands = 0;
    let loadedFiles = new Set<string>();
    let erroredFiles = new Set<string>();

    const loadCommandsProcess = async () => {
      for (const file of files) {
        if (loadedFiles.has(file) || erroredFiles.has(file)) {
          skippedCommands++;
          continue;
        }

        if (harmonix.options.debug) {
          console.debug(`[DEBUG] Attempting to load command from file: ${file}`);
        }
        
        try {
          const commandModule = await import(file);
          let command: HarmonixCommand;

          if (typeof commandModule.default === 'function' && commandModule.default.build) {
            command = commandModule.default.build();
            consola.info(colors.cyan(` Command ${file} uses defineCommand structure`));
          } else if (typeof commandModule.default === 'object' && 'execute' in commandModule.default) {
            command = commandModule.default;
            consola.info(colors.cyan(` Command ${file} uses regular command structure`));
          } else {
            throw new Error(`Invalid command structure in file: ${file}. Please check for incorrect import statements or other issues.`);
          }

          if (command && typeof command === 'object' && 'name' in command && 'execute' in command) {
            if (
              (harmonix.options.featureFlags?.disabledCommands.includes(command.name)) ||
              (harmonix.options.featureFlags?.betaCommands.includes(command.name) && !command.beta)
            ) {
              if (harmonix.options.debug) {
                console.debug(`[DEBUG] Skipping ${harmonix.options.featureFlags?.disabledCommands.includes(command.name) ? 'disabled' : 'non-beta'} command: ${command.name}`);
              }
              skippedCommands++;
              continue;
            }
            const relativePath = path.relative(harmonix.options.dirs.commands, file);
            const folderPath = path.dirname(relativePath);
            const folderName = folderPath === '.' ? 'main' : folderPath;
            
            if (command.slashCommand) {
              harmonix.slashCommands.set(command.name, command);
              consola.info(colors.blueBright(`[${folderName}] `) + colors.blue(`Loaded slash command: ${command.name}`));
              loadedSlashCommands++;
            } else {
              harmonix.commands.set(command.name, command);
              consola.info(colors.blueBright(`[${folderName}] `) + colors.blue(`Loaded command: ${command.name}`));
              loadedRegularCommands++;
            }
            loadedFiles.add(file);
          } else {
            throw new Error(`Invalid command structure in file: ${file}. Please check for incorrect import statements or other issues.`);
          }
        } catch (error) {
          consola.error(colors.red(`An error has occurred while loading command from file: ${file}`));
          consola.error(colors.red(`Error details: ${error instanceof Error ? error.message : String(error)}`));
          consola.error(colors.red('Stack trace:'));
          if (error instanceof Error && error.stack) {
            consola.error(colors.red(error.stack));
          }
          erroredFiles.add(file);
        }
      }
    };

    try {
      await loadCommandsProcess();
    } catch (error) {
      consola.error(colors.red('Error loading commands:'), error);
    }

    consola.info(colors.green(` Loaded ${loadedRegularCommands} regular commands and ${loadedSlashCommands} slash commands. Skipped ${skippedCommands} commands due to errors.`));
  }
}*/